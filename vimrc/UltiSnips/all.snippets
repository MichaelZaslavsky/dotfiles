global !p
from snippet_helpers import *
endglobal

# -----------------------------------------------------------------------------
# Terraform
# -----------------------------------------------------------------------------

snippet aip "aws_iam_policy resource" b
resource "aws_iam_policy" "${1:__policy__}" {
  name        = "$1"
  description = "${2:__description__}"
  policy      = data.aws_iam_policy_document.$1.json
}
endsnippet

snippet aipd "aws_iam_policy_document data" b
data "aws_iam_policy_document" "${1:__policy__}" {
  statement {
    actions = [
      "$2",
    ]

    resources = ["$3"]
  }
}
endsnippet

snippet air "aws_iam_role resource" b
resource "aws_iam_role" "${1:__role__}" {
  name = "$1"

  assume_role_policy = data.aws_iam_policy_document.gw-assume-role-with-saml.json
  # 12 hours, the maximum allowed
  max_session_duration = 43200
}
endsnippet

snippet airpa "aws_iam_role_policy_attachment resource" b
resource "aws_iam_role_policy_attachment" "${1:__role__}-${2:__policy__}" {
  role       = aws_iam_role.$1.name
  policy_arn = aws_iam_policy.$2.arn
}
endsnippet

snippet gil "github_issue_label resource" b
resource "github_issue_label" "${1:__label__}" {
  name = "$1"

  color       = local.$2`!p snip.rv=complete(t[2], ['advisory','gogogo','warning'])`_color
  description = "${3:__description__}"
  repository  = github_repository.repo.name
}
endsnippet

snippet gr "github repository module" b
module "${1:__repo_name_without_prefix__}_repo" {
  source = "${2:__path_to_smart_repo__}"

  name        = "${3:__repo__}"
  description = "${4:__description__}"
}
endsnippet

snippet gt "github_team resource" b
resource "github_team" "${1:__name__}" {
  name           = "$1"
  ${2:__optional__}#parent_team_id = ${3:__parent.id__}
  privacy        = "closed"
}
endsnippet

snippet gtm "github_team_membership resource" b
resource "github_team_membership" "${1:__team_name__}-members" {
  for_each = toset([
    "${2:__member__}",
  ])

  team_id  = github_team.$1.id
  role     = "member"
  username = each.key
}
endsnippet

snippet gtr "github_team_repository resource" b
resource "github_team_repository" "${1:__team_name__}-${2:__repo_dash_case__}" {
  team_id    = ${3:optional}github_team.$1$4`!p snip.rv=complete(t[4], ['.', '_'])`id
  repository = module.${5:__repo_snake_case__}.name
  permission = "push"
}
endsnippet

snippet nrepo "New repository" b
resource "github_team" "${1:__name__}" {
  name           = "$1"
  ${2:__optional__}#parent_team_id = ${3:__parent.id__}
  privacy        = "closed"
}

resource "github_team_membership" "$1-members" {
  for_each = toset([
    "${4:__member__}",
  ])

  team_id  = github_team.$1.id
  role     = "member"
  username = each.key
}

module "${5:__repo_name_without_prefix__}_repo" {
  source = "${6:__path_to_smart_repo__}"

  name        = "${7:__repo__}"
  description = "${8:__description__}"
}

resource "github_team_repository" "$1-$7" {
  team_id    = $2github_team.$1$9`!p snip.rv=complete(t[9], ['.', '_'])`id
  repository = module.${10:__repo_snake_case__}.name
  permission = "push"
}
endsnippet

snippet nrole "New role" b
data "aws_iam_policy_document" "${1:__policy__}" {
  statement {
    actions = [
      "$2",
    ]

    resources = ["$3"]
  }
}

resource "aws_iam_policy" "$1" {
  name        = "$1"
  description = "${4:__description__}"
  policy      = data.aws_iam_policy_document.$1.json
}

resource "aws_iam_role" "${5:__role__}" {
  name = "$5"

  assume_role_policy = data.aws_iam_policy_document.gw-assume-role-with-saml.json
  # 12 hours, the maximum allowed
  max_session_duration = 43200
}

resource "aws_iam_role_policy_attachment" "$5-$1" {
  role       = aws_iam_role.$5.name
  policy_arn = aws_iam_policy.$1.arn
}
endsnippet

snippet output "Output" b
output "${1:__snake_case__}" {
  value = $2
}
endsnippet

snippet statement "Statement" b
statement {
  actions = [
    "$1",
  ]

  resources = ["$2"]
}
endsnippet
