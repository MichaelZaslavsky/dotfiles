snippet aip "aws_iam_policy resource"
resource "aws_iam_policy" "${1:__policy__}" {
  name        = "${2:__policy__}"
  description = "${3:__description__}"
  policy      = "${4:__policy__}"
}
endsnippet

snippet aipd "aws_iam_policy_document data"
data "aws_iam_policy_document" "${1:__policy__}" {
  statement {
    actions = [
      "${2}",
    ]

    resources = ["${3}"]
  }
}
endsnippet

snippet air "aws_iam_role resource"
resource "aws_iam_role" "${1:__role__}" {
  name = "${2:__role__}"

  assume_role_policy = ${3}
  # 12 hours, the maximum allowed
  max_session_duration = 43200
}
endsnippet

snippet airpa "aws_iam_role_policy_attachment resource"
resource "aws_iam_role_policy_attachment" "${1:__role-policy__}" {
  role       = aws_iam_role.${2:__role__}.name
  policy_arn = aws_iam_policy.${3:__policy__}.arn
}
endsnippet

snippet gil "github_issue_label resource"
resource "github_issue_label" "${1:__label__}" {
  name = "${2:__label__}"

  color       = local.${3:__advisory/gogogo/warning__}_color
  description = "${4:__description__}"
  repository  = github_repository.repo.name
}
endsnippet

snippet gr "github repository module"
module "${1:__reponamewithoutprefix__}_repo" {
  source	  = "${2:__pathtosmartrepo__}"
  name        = "${3:__repositoryname__}"
  description = "${4:__description__}"
}
endsnippet

snippet gt "github_team resource"
resource "github_team" "${1:__name__}" {
  name           = "${2:__name__}"
  ${3:__optional__}#parent_team_id = ${4:__parent.id__}
  privacy        = "closed"
}
endsnippet

snippet gtm "github_team_membership resource"
resource "github_team_membership" "${1:__teamname__}" {
  for_each = toset([
    "${2:__member__}",
  ])

  team_id  = github_team.${3:__teamname__}.id
  role     = "member"
  username = each.key
}
endsnippet

snippet gtr "github_team_repository resource"
resource "github_team_repository" "${1:__teamname__}-${2:__repo__}" {
  team_id    = github_team.${3:__teamname__}.id
  repository = module.${4:__repo__}.name
  permission = "push"
}
endsnippet

snippet nrepo "New repository"
resource "github_team" "${1:__name__}" {
  name           = "${2:__name__}"
  ${3:optional}#parent_team_id = ${4:__parent.id__}
  privacy        = "closed"
}

resource "github_team_membership" "${5:__teamname__}" {
  for_each = toset([
    "${6:__member__}",
  ])

  team_id  = github_team.${7:__teamname__}.id
  role     = "member"
  username = each.key
}

module "${8:__reponamewithoutprefix__}_repo" {
  source	  = "${9:__pathtosmartrepo__}"
  name        = "${10:__reponame__}"
  description = "${11:__description__}"
}

resource "github_team_repository" "${12:__teamname__}-${13:__repo__}" {
  team_id    = github_team.${14:__teamname__}.id
  repository = module.${15:__repo__}.name
  permission = "push"
}
endsnippet

snippet nrole "New role"
data "aws_iam_policy_document" "${1:__policy__}" {
  statement {
    actions = [
      "${2}",
    ]

    resources = ["${3}"]
  }
}

resource "aws_iam_policy" "${4:__policy__}" {
  name        = "${5:__policy__}"
  description = "${6:__description__}"
  policy      = "${7:__policy__}"
}

resource "aws_iam_role" "${8:__role__}" {
  name = "${9:__role__}"

  assume_role_policy = ${10}
  # 12 hours, the maximum allowed
  max_session_duration = 43200
}

resource "aws_iam_role_policy_attachment" "${11:__role-policy__}" {
  role       = aws_iam_role.${12:__role__}.name
  policy_arn = aws_iam_policy.${13:__policy__}.arn
}
endsnippet

snippet output
output "${1:__snake_case__}" {
  value = ${2}
}
endsnippet

snippet statement
  statement {
	actions = [
	  "${1}",
	]

	resources = ["${2}"]
  }
endsnippet

